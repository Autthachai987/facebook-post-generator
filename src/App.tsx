import React, { useEffect, useState } from 'react';
import {
  Calendar,
  Clock,
  Hash,
  Sparkles,
  Copy,
  Check,
  Instagram,
  Sun,
  Moon,
  ClipboardCopy,
  Lightning
} from 'lucide-react';

interface PostData {
  topic: string;
  tone: string;
  mood: string;
  date: string;
  time: string;
  extra?: string;
}

const tones = [
  { value: 'casual', label: 'üòä ‡∏™‡∏ö‡∏≤‡∏¢‡πÜ ‡πÑ‡∏°‡πà‡πÄ‡∏õ‡πá‡∏ô‡∏ó‡∏≤‡∏á‡∏Å‡∏≤‡∏£' },
  { value: 'professional', label: 'üíº ‡πÄ‡∏õ‡πá‡∏ô‡∏ó‡∏≤‡∏á‡∏Å‡∏≤‡∏£ ‡∏°‡∏∑‡∏≠‡∏≠‡∏≤‡∏ä‡∏µ‡∏û' },
  { value: 'friendly', label: 'ü§ù ‡πÄ‡∏õ‡πá‡∏ô‡∏Å‡∏±‡∏ô‡πÄ‡∏≠‡∏á ‡∏≠‡∏ö‡∏≠‡∏∏‡πà‡∏ô' },
  { value: 'humorous', label: 'üòÑ ‡∏ï‡∏•‡∏Å ‡∏™‡∏ô‡∏∏‡∏Å‡∏™‡∏ô‡∏≤‡∏ô' },
  { value: 'inspirational', label: '‚ú® ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏£‡∏á‡∏ö‡∏±‡∏ô‡∏î‡∏≤‡∏•‡πÉ‡∏à' },
  { value: 'informative', label: 'üìö ‡πÉ‡∏´‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ‡∏Å‡∏≤‡∏£‡∏®‡∏∂‡∏Å‡∏©‡∏≤' }
];

const moods = [
  { value: 'positive', label: 'üòä ‡πÄ‡∏ä‡∏¥‡∏á‡∏ö‡∏ß‡∏Å ‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∏‡∏Ç', emoji: 'üòä' },
  { value: 'excited', label: 'üéâ ‡∏ï‡∏∑‡πà‡∏ô‡πÄ‡∏ï‡πâ‡∏ô ‡∏Å‡∏£‡∏∞‡∏ï‡∏∑‡∏≠‡∏£‡∏∑‡∏≠‡∏£‡πâ‡∏ô', emoji: 'üéâ' },
  { value: 'thoughtful', label: 'ü§î ‡πÉ‡∏Ñ‡∏£‡πà‡∏Ñ‡∏£‡∏ß‡∏ç ‡∏•‡∏∂‡∏Å‡∏ã‡∏∂‡πâ‡∏á', emoji: 'ü§î' },
  { value: 'grateful', label: 'üôè ‡∏Ç‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì ‡∏£‡∏π‡πâ‡∏™‡∏∂‡∏Å‡∏ã‡∏≤‡∏ö‡∏ã‡∏∂‡πâ‡∏á', emoji: 'üôè' },
  { value: 'motivational', label: 'üí™ ‡∏Å‡∏£‡∏∞‡∏ï‡∏∏‡πâ‡∏ô‡πÉ‡∏à ‡πÄ‡∏£‡πâ‡∏≤‡πÉ‡∏à', emoji: 'üí™' },
  { value: 'calm', label: 'üòå ‡∏™‡∏á‡∏ö ‡∏ú‡πà‡∏≠‡∏ô‡∏Ñ‡∏•‡∏≤‡∏¢', emoji: 'üòå' }
];

const initial: PostData = {
  topic: '',
  tone: 'casual',
  mood: 'positive',
  date: '',
  time: '',
  extra: ''
};

const App: React.FC = () => {
  const [formData, setFormData] = useState<PostData>(initial);
  const [generatedPost, setGeneratedPost] = useState('');
  const [hashtags, setHashtags] = useState<string[]>([]);
  const [isGenerating, setIsGenerating] = useState(false);
  const [copied, setCopied] = useState(false);
  const [theme, setTheme] = useState<'light' | 'dark'>('light');

  useEffect(() => {
    // Respect OS preference on first load
    const prefersDark = window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches;
    setTheme(prefersDark ? 'dark' : 'light');
    document.documentElement.classList.toggle('dark', prefersDark);
  }, []);

  useEffect(() => {
    document.documentElement.classList.toggle('dark', theme === 'dark');
  }, [theme]);

  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement>) => {
    setFormData({ ...formData, [e.target.name]: e.target.value });
  };

  const generatePost = () => {
    if (!formData.topic.trim()) {
      window.alert('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠‡πÇ‡∏û‡∏™‡∏ï‡πå');
      return;
    }

    setIsGenerating(true);
    setGeneratedPost('');
    setHashtags([]);

    // Simulate AI call
    setTimeout(() => {
      const moodEmoji = moods.find(m => m.value === formData.mood)?.emoji || 'üòä';
      const topic = formData.topic.trim();
      let post = '';

      switch (formData.tone) {
        case 'professional':
          post = `üì¢ ${topic}\n\n‡πÄ‡∏£‡∏≤‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡∏ó‡∏µ‡πà‡∏à‡∏∞‡πÅ‡∏ö‡πà‡∏á‡∏õ‡∏±‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö ${topic} ‡∏ã‡∏∂‡πà‡∏á‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏ó‡∏µ‡πà‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡πÅ‡∏•‡∏∞‡∏°‡∏µ‡∏õ‡∏£‡∏∞‡πÇ‡∏¢‡∏ä‡∏ô‡πå‡∏ï‡πà‡∏≠‡∏ó‡∏∏‡∏Å‡∏ó‡πà‡∏≤‡∏ô\n\n‡∏´‡∏≤‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏° ‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡πÄ‡∏£‡∏≤‡πÑ‡∏î‡πâ‡πÄ‡∏™‡∏°‡∏≠‡∏Ñ‡∏£‡∏±‡∏ö/‡∏Ñ‡πà‡∏∞ ${moodEmoji}`;
          break;
        case 'humorous':
          post = `555+ ‡∏°‡∏≤‡∏ü‡∏±‡∏á‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á ${topic} ‡∏Å‡∏±‡∏ô‡∏´‡∏ô‡πà‡∏≠‡∏¢! üòÑ\n\n‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡∏°‡∏µ‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏Ç‡∏≥‡πÜ ‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö ${topic} ‡∏°‡∏≤‡πÅ‡∏ä‡∏£‡πå‡πÉ‡∏´‡πâ‡∏Æ‡∏≤‡∏Å‡∏±‡∏ô ‡πÉ‡∏Ñ‡∏£‡πÄ‡∏Ñ‡∏¢‡πÄ‡∏à‡∏≠‡πÅ‡∏ö‡∏ö‡∏ô‡∏µ‡πâ‡∏ö‡πâ‡∏≤‡∏á ‡πÅ‡∏ä‡∏£‡πå‡πÄ‡∏•‡∏¢! ${moodEmoji}`;
          break;
        case 'inspirational':
          post = `‚ú® ${topic} - ‡∏ö‡∏ó‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡πÅ‡∏´‡πà‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à\n\n‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏£‡∏≤‡∏û‡∏π‡∏î‡∏ñ‡∏∂‡∏á ${topic} ‡πÄ‡∏£‡∏≤‡∏à‡∏∞‡∏ô‡∏∂‡∏Å‡∏ñ‡∏∂‡∏á‡πÇ‡∏≠‡∏Å‡∏≤‡∏™‡πÉ‡∏´‡∏°‡πà‡πÜ ‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡πÄ‡∏ï‡∏¥‡∏ö‡πÇ‡∏ï‡πÄ‡∏™‡∏°‡∏≠\n\n‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡πÉ‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏≠‡∏á‡πÅ‡∏•‡∏∞‡∏•‡∏á‡∏°‡∏∑‡∏≠‡∏ó‡∏≥‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ ${moodEmoji}\n\n#‡∏≠‡∏¢‡πà‡∏≤‡∏¢‡∏≠‡∏°‡πÅ‡∏û‡πâ #‡∏™‡∏π‡πâ‡∏ï‡πà‡∏≠‡πÑ‡∏õ`;
          break;
        case 'informative':
          post = `üìö ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ô‡πà‡∏≤‡∏™‡∏ô‡πÉ‡∏à: ${topic}\n\n‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö ${topic}:\n\n‚úÖ ‡∏™‡∏¥‡πà‡∏á‡∏ó‡∏µ‡πà‡∏Ñ‡∏ß‡∏£‡∏£‡∏π‡πâ\n‚úÖ ‡∏õ‡∏£‡∏∞‡πÇ‡∏¢‡∏ä‡∏ô‡πå\n‚úÖ ‡∏ß‡∏¥‡∏ò‡∏µ‡πÉ‡∏ä‡πâ‡πÉ‡∏ô‡∏ä‡∏µ‡∏ß‡∏¥‡∏ï‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡∏ß‡∏±‡∏ô\n\n‡∏´‡∏ß‡∏±‡∏á‡∏ß‡πà‡∏≤‡∏à‡∏∞‡πÄ‡∏õ‡πá‡∏ô‡∏õ‡∏£‡∏∞‡πÇ‡∏¢‡∏ä‡∏ô‡πå‡∏ô‡∏∞‡∏Ñ‡∏£‡∏±‡∏ö ${moodEmoji}`;
          break;
        case 'friendly':
          post = `‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ‡∏Ñ‡∏£‡∏±‡∏ö/‡∏Ñ‡πà‡∏∞! ü§ó\n\n‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡∏≠‡∏¢‡∏≤‡∏Å‡∏ä‡∏ß‡∏ô‡∏Ñ‡∏∏‡∏¢‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á ${topic} ‡∏Ñ‡∏£‡∏±‡∏ö ‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏ó‡∏µ‡πà‡∏ô‡πà‡∏≤‡∏™‡∏ô‡πÉ‡∏à‡∏°‡∏≤‡∏Å‡πÅ‡∏•‡∏∞‡∏≠‡∏¢‡∏≤‡∏Å‡∏ü‡∏±‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏¥‡∏î‡πÄ‡∏´‡πá‡∏ô‡∏à‡∏≤‡∏Å‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏ô ${moodEmoji}\n\n‡πÉ‡∏Ñ‡∏£‡∏°‡∏µ‡∏õ‡∏£‡∏∞‡∏™‡∏ö‡∏Å‡∏≤‡∏£‡∏ì‡πå‡∏°‡∏≤‡πÅ‡∏ä‡∏£‡πå‡∏Å‡∏±‡∏ô‡πÑ‡∏î‡πâ‡∏ô‡∏∞‡∏Ñ‡∏£‡∏±‡∏ö`;
          break;
        default:
          post = `‡πÄ‡∏Æ‡πâ‡∏¢! ‡∏°‡∏≤‡∏Ñ‡∏∏‡∏¢‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á ${topic} ‡∏Å‡∏±‡∏ô‡∏´‡∏ô‡πà‡∏≠‡∏¢ üòä\n\n‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡πÄ‡∏à‡∏≠‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏ô‡πà‡∏≤‡∏™‡∏ô‡πÉ‡∏à‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö ${topic} ‡πÄ‡∏•‡∏¢‡∏≠‡∏¢‡∏≤‡∏Å‡∏°‡∏≤‡πÅ‡∏ä‡∏£‡πå‡∏Å‡∏±‡∏ô ‡∏°‡∏≤‡∏Ñ‡∏∏‡∏¢‡∏Å‡∏±‡∏ô‡∏Ñ‡∏£‡∏±‡∏ö! ${moodEmoji}`;
      }

      // allow user extra custom text appended
      if (formData.extra && formData.extra.trim()) {
        post += `\n\n${formData.extra.trim()}`;
      }

      setGeneratedPost(post);

      // Build hashtags
      const baseHashtags = [
        `#${topic.replace(/\s+/g, '')}`,
        '#FacebookThailand',
        '#ThaiContent',
        '#SocialMedia'
      ];

      if (formData.mood === 'positive') {
        baseHashtags.push('#PositiveVibes', '#HappyMoments');
      } else if (formData.mood === 'excited') {
        baseHashtags.push('#Exciting', '#LetsGo');
      } else if (formData.mood === 'motivational') {
        baseHashtags.push('#Motivation', '#Inspiration');
      }

      if (formData.tone === 'professional') {
        baseHashtags.push('#Business', '#Professional');
      } else if (formData.tone === 'humorous') {
        baseHashtags.push('#Funny', '#LOL');
      }

      setHashtags(baseHashtags);
      setIsGenerating(false);

    }, 900);
  };

  const copyToClipboard = async () => {
    if (!generatedPost) return;
    const fullPost = `${generatedPost}\n\n${hashtags.join(' ')}`;
    try {
      await navigator.clipboard.writeText(fullPost);
      setCopied(true);
      setTimeout(() => setCopied(false), 2000);
    } catch (err) {
      console.error('copy failed', err);
      window.alert('‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏Ñ‡∏±‡∏î‡∏•‡∏≠‡∏Å‡πÑ‡∏î‡πâ ‡∏•‡∏≠‡∏á‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á');
    }
  };

  const copyHashtag = async (tag: string) => {
    try {
      await navigator.clipboard.writeText(tag);
      // small visual feedback could be added per-tag (not implemented to keep code concise)
    } catch (err) {
      console.error(err);
    }
  };

  const downloadTextFile = () => {
    if (!generatedPost) return;
    const blob = new Blob([`${generatedPost}\n\n${hashtags.join(' ')}`], { type: 'text/plain;charset=utf-8' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `${formData.topic.replace(/\s+/g, '_') || 'post'}.txt`;
    a.click();
    URL.revokeObjectURL(url);
  };

  const formattedDate = () => {
    if (!formData.date) return '';
    try {
      return new Date(formData.date).toLocaleDateString('th-TH', { year: 'numeric', month: 'long', day: 'numeric' });
    } catch (e) {
      return formData.date;
    }
  };

  return (
    <div className="min-h-screen p-6 bg-gradient-to-br from-gray-50 via-white to-purple-50 dark:from-slate-900 dark:via-slate-800 dark:to-slate-900">
      <div className="max-w-5xl mx-auto">

        {/* Top bar */}
        <header className="flex items-center justify-between mb-6">
          <div className="flex items-center gap-4">
            <div className="w-12 h-12 rounded-xl bg-gradient-to-br from-purple-600 to-pink-500 flex items-center justify-center text-white shadow-lg">
              <Instagram className="w-6 h-6" />
            </div>
            <div>
              <h1 className="text-2xl font-extrabold text-gray-800 dark:text-gray-100">AI Facebook Post Generator</h1>
              <p className="text-sm text-gray-500 dark:text-gray-300">‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏û‡∏™‡∏ï‡πå‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û‡∏™‡∏π‡∏á ‡∏™‡∏ß‡∏¢ ‡∏ñ‡∏π‡∏Å‡πÉ‡∏à ‡πÅ‡∏•‡∏∞‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏à‡∏£‡∏¥‡∏á</p>
            </div>
          </div>

          <div className="flex items-center gap-3">
            <button
              aria-label="Toggle theme"
              onClick={() => setTheme(prev => prev === 'light' ? 'dark' : 'light')}
              className="p-2 rounded-md bg-white dark:bg-slate-700 shadow-sm hover:shadow-md transition"
            >
              {theme === 'light' ? <Moon className="w-5 h-5 text-yellow-500" /> : <Sun className="w-5 h-5 text-yellow-300" />}
            </button>

            <div className="text-xs text-gray-500 dark:text-gray-300">Powered by Claude AI</div>
          </div>
        </header>

        <main className="grid grid-cols-1 lg:grid-cols-2 gap-6">

          {/* Left: Form */}
          <section className="bg-white dark:bg-slate-800 rounded-2xl p-6 shadow-lg border border-gray-100 dark:border-slate-700">
            <h2 className="text-lg font-semibold mb-4 text-gray-800 dark:text-gray-100">‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏û‡∏™‡∏ï‡πå</h2>

            <div className="space-y-4">
              <div>
                <label className="block text-sm font-medium text-gray-700 dark:text-gray-200 mb-1">‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠‡πÇ‡∏û‡∏™‡∏ï‡πå *</label>
                <input
                  name="topic"
                  value={formData.topic}
                  onChange={handleInputChange}
                  className="w-full px-4 py-3 rounded-lg border border-gray-200 dark:border-slate-700 bg-gradient-to-r from-purple-50 to-white dark:bg-slate-900 focus:outline-none focus:ring-2 focus:ring-purple-300"
                  placeholder="‡πÄ‡∏ä‡πà‡∏ô: ‡πÄ‡∏ó‡∏Ñ‡∏ô‡∏¥‡∏Ñ‡∏Å‡∏≤‡∏£‡∏ï‡∏•‡∏≤‡∏î‡∏≠‡∏≠‡∏ô‡πÑ‡∏•‡∏ô‡πå"
                />
              </div>

              <div className="grid grid-cols-2 gap-3">
                <div>
                  <label className="block text-sm font-medium text-gray-700 dark:text-gray-200 mb-1">‡πÇ‡∏ó‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô</label>
                  <select name="tone" value={formData.tone} onChange={handleInputChange} className="w-full px-4 py-3 rounded-lg border border-gray-200 dark:border-slate-700 bg-white dark:bg-slate-900 focus:outline-none">
                    {tones.map(t => <option key={t.value} value={t.value}>{t.label}</option>)}
                  </select>
                </div>
                <div>
                  <label className="block text-sm font-medium text-gray-700 dark:text-gray-200 mb-1">‡∏≠‡∏≤‡∏£‡∏°‡∏ì‡πå‡∏Ç‡∏≠‡∏á‡πÇ‡∏û‡∏™‡∏ï‡πå</label>
                  <select name="mood" value={formData.mood} onChange={handleInputChange} className="w-full px-4 py-3 rounded-lg border border-gray-200 dark:border-slate-700 bg-white dark:bg-slate-900 focus:outline-none">
                    {moods.map(m => <option key={m.value} value={m.value}>{m.label}</option>)}
                  </select>
                </div>
              </div>

              <div>
                <label className="block text-sm font-medium text-gray-700 dark:text-gray-200 mb-1">‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏° (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)</label>
                <textarea name="extra" value={formData.extra} onChange={handleInputChange} rows={3} className="w-full px-4 py-3 rounded-lg border border-gray-200 dark:border-slate-700 bg-white dark:bg-slate-900 focus:outline-none" placeholder="‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏´‡∏£‡∏∑‡∏≠ CTA, ‡∏•‡∏¥‡∏á‡∏Å‡πå‡∏™‡∏±‡πâ‡∏ô, ‡∏´‡∏£‡∏∑‡∏≠‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏â‡∏û‡∏≤‡∏∞"></textarea>
              </div>

              <div className="grid grid-cols-2 gap-3">
                <div>
                  <label className="block text-sm font-medium text-gray-700 dark:text-gray-200 mb-1"><Calendar className="inline mr-1 w-4 h-4"/> ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÇ‡∏û‡∏™‡∏ï‡πå</label>
                  <input type="date" name="date" value={formData.date} onChange={handleInputChange} className="w-full px-4 py-3 rounded-lg border border-gray-200 dark:border-slate-700 bg-white dark:bg-slate-900 focus:outline-none" />
                </div>
                <div>
                  <label className="block text-sm font-medium text-gray-700 dark:text-gray-200 mb-1"><Clock className="inline mr-1 w-4 h-4"/> ‡πÄ‡∏ß‡∏•‡∏≤‡πÇ‡∏û‡∏™‡∏ï‡πå</label>
                  <input type="time" name="time" value={formData.time} onChange={handleInputChange} className="w-full px-4 py-3 rounded-lg border border-gray-200 dark:border-slate-700 bg-white dark:bg-slate-900 focus:outline-none" />
                </div>
              </div>

              <div className="flex gap-3">
                <button onClick={generatePost} disabled={isGenerating} className="flex-1 inline-flex items-center justify-center gap-2 px-4 py-3 rounded-lg bg-gradient-to-r from-purple-600 to-pink-500 text-white font-semibold shadow hover:scale-[1.01] transition disabled:opacity-60">
                  {isGenerating ? <><div className="animate-spin rounded-full h-5 w-5 border-b-2 border-white"/> ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á...</> : <><Sparkles className="w-5 h-5"/> ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏û‡∏™‡∏ï‡πå‡∏î‡πâ‡∏ß‡∏¢ AI</>}
                </button>

                <button onClick={() => { setFormData(initial); setGeneratedPost(''); setHashtags([]); }} className="px-4 py-3 rounded-lg border border-gray-200 dark:border-slate-700 bg-white dark:bg-slate-700 text-gray-700 dark:text-gray-100">‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï</button>
              </div>

            </div>
          </section>

          {/* Right: Preview & Actions */}
          <aside className="space-y-4">

            <div className="bg-gradient-to-br from-purple-50 to-pink-50 dark:from-slate-800 dark:to-slate-800 rounded-2xl p-5 shadow-lg border border-purple-100 dark:border-slate-700">
              <div className="flex items-start gap-3">
                <div className="w-12 h-12 rounded-lg bg-white dark:bg-slate-900 p-2 shadow-sm flex items-center justify-center">
                  <Instagram className="w-6 h-6 text-pink-500" />
                </div>
                <div className="flex-1">
                  <div className="flex items-center justify-between">
                    <div>
                      <div className="text-sm font-semibold text-gray-800 dark:text-gray-100">‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÇ‡∏û‡∏™‡∏ï‡πå</div>
                      <div className="text-xs text-gray-500 dark:text-gray-300">‡∏î‡∏π‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Å‡πà‡∏≠‡∏ô‡πÇ‡∏û‡∏™‡∏ï‡πå‡∏ö‡∏ô Facebook</div>
                    </div>
                    <div className="text-xs text-gray-500 dark:text-gray-300">Realtime Preview</div>
                  </div>

                  <div className="mt-4 bg-white dark:bg-slate-900 rounded-lg p-4 border border-gray-100 dark:border-slate-700">
                    {generatedPost ? (
                      <div className="whitespace-pre-wrap text-gray-800 dark:text-gray-100 leading-relaxed">{generatedPost}</div>
                    ) : (
                      <div className="text-gray-400 dark:text-gray-400">‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏û‡∏™‡∏ï‡πå ‚Äî ‡∏Ñ‡∏•‡∏¥‡∏Å "‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏û‡∏™‡∏ï‡πå‡∏î‡πâ‡∏ß‡∏¢ AI" ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏π‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á</div>
                    )}
                  </div>

                  {/* Hashtag chips */}
                  {hashtags.length > 0 && (
                    <div className="mt-3 flex flex-wrap gap-2">
                      {hashtags.map((tag, i) => (
                        <button key={i} onClick={() => copyHashtag(tag)} className="text-sm px-3 py-1 rounded-full bg-white dark:bg-slate-900 border border-gray-200 dark:border-slate-700 shadow-sm hover:scale-[1.02] transition">{tag}</button>
                      ))}
                    </div>
                  )}

                  <div className="mt-4 flex gap-2">
                    <button onClick={copyToClipboard} disabled={!generatedPost} className="flex-1 inline-flex items-center justify-center gap-2 px-4 py-2 rounded-lg bg-gradient-to-r from-pink-500 to-orange-500 text-white font-medium">
                      <ClipboardCopy className="w-4 h-4"/> {copied ? '‡∏Ñ‡∏±‡∏î‡∏•‡∏≠‡∏Å‡πÅ‡∏•‡πâ‡∏ß' : '‡∏Ñ‡∏±‡∏î‡∏•‡∏≠‡∏Å‡πÇ‡∏û‡∏™‡∏ï‡πå'}
                    </button>
                    <button onClick={downloadTextFile} disabled={!generatedPost} className="px-4 py-2 rounded-lg border border-gray-200 dark:border-slate-700 bg-white dark:bg-slate-700">‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î</button>
                  </div>
                </div>
              </div>
            </div>

            {/* Schedule card */}
            {(formData.date || formData.time) && (
              <div className="bg-white dark:bg-slate-800 rounded-2xl p-4 shadow border border-gray-100 dark:border-slate-700">
                <div className="flex items-center gap-3 mb-2">
                  <Calendar className="w-5 h-5 text-purple-600"/>
                  <div className="text-sm font-medium text-gray-800 dark:text-gray-100">‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Å‡∏≤‡∏£‡πÇ‡∏û‡∏™‡∏ï‡πå</div>
                </div>
                <div className="text-gray-700 dark:text-gray-300 text-sm">
                  {formData.date && <div className="flex items-center gap-2 mb-1"><span className="font-medium">‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà:</span> {formattedDate()}</div>}
                  {formData.time && <div className="flex items-center gap-2"><span className="font-medium">‡πÄ‡∏ß‡∏•‡∏≤:</span> {formData.time} ‡∏ô.</div>}
                </div>
              </div>
            )}

            {/* Tips */}
            <div className="bg-gradient-to-br from-orange-50 to-yellow-50 dark:from-slate-800 dark:to-slate-800 rounded-2xl p-4 shadow border border-orange-100 dark:border-slate-700">
              <div className="flex items-center gap-3 mb-2">
                <Lightning className="w-5 h-5 text-yellow-500" />
                <div className="text-sm font-medium text-gray-800 dark:text-gray-100">‡πÄ‡∏Ñ‡∏•‡πá‡∏î‡∏•‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÇ‡∏û‡∏™‡∏ï‡πå</div>
              </div>
              <ul className="text-sm text-gray-600 dark:text-gray-300 space-y-1">
                <li>‚Ä¢ ‡πÉ‡∏™‡πà CTA ‡∏ä‡∏±‡∏î‡πÄ‡∏à‡∏ô ‡πÄ‡∏ä‡πà‡∏ô ‚Äú‡∏≠‡πà‡∏≤‡∏ô‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°‚Äù, ‚Äú‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡πÄ‡∏£‡∏≤‚Äù</li>
                <li>‚Ä¢ ‡∏£‡∏∞‡∏ö‡∏∏‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà/‡πÄ‡∏ß‡∏•‡∏≤‡πÇ‡∏û‡∏™‡∏ï‡πå‡πÉ‡∏´‡πâ‡∏ä‡∏±‡∏î ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≠‡∏ô‡πÄ‡∏ó‡∏ô‡∏ï‡πå</li>
                <li>‚Ä¢ ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÇ‡∏ó‡∏ô‡πÅ‡∏•‡∏∞‡∏≠‡∏≤‡∏£‡∏°‡∏ì‡πå‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏π‡∏ú‡∏•‡∏ï‡∏≠‡∏ö‡∏£‡∏±‡∏ö‡∏à‡∏≤‡∏Å‡∏ú‡∏π‡πâ‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°</li>
              </ul>
            </div>

          </aside>

        </main>

        <footer className="mt-6 text-center text-sm text-gray-500 dark:text-gray-400">¬© {new Date().getFullYear()} ‚Äî AI Facebook Post Generator</footer>
      </div>
    </div>
  );
};

export default App;
